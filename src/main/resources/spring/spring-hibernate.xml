<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- 配置数据库相关参数 -->
    <context:property-placeholder location="classpath:properties/db.properties" file-encoding="utf-8" ignore-unresolvable="true" />


    <!-- 最小化配置 start -->
    <!-- 使用C3P0数据源，MySQL数据库 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClass" value="${jdbc.driverClassName}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <!-- 配置其他属性 -->
        <property name="maxPoolSize" value="40"></property>
        <property name="minPoolSize" value="1"></property>
        <property name="initialPoolSize" value="1"></property>
        <property name="maxIdleTime" value="20"></property>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 注册上边datasource中的配置信息，为hibernate所用 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 项目实体类所在目录说明 -->
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>com.shop.model</value>
            </list>
        </property>
        <!-- bibernate的一些配置 -->
        <property name="hibernateProperties">
            <props>

                <!-- 允许Hibernate针对特定的关系数据库生成优化的SQL -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>

                <!-- 在SessionFactory创建时，自动检查数据库结构 取值 validate | update | create | create-drop -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>

                <!-- 输出所有SQL语句到控制台 -->
                <prop key="hibernate.show_sql">false</prop>

                <!-- 在log和console中打印出更漂亮的SQL -->
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
    </bean>
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <!-- 开启注解事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 最小化配置 end -->

    <!-- 使用alibaba druid数据源的相关配置 -->
    <!-- 阿里 druid 数据库连接池 -->
    <!--<bean id = "dataSource" class = "${jdbc.dataSource}" >-->
        <!--&lt;!&ndash; 数据库基本信息配置 &ndash;&gt;-->
        <!--<property name = "url" value = "${jdbc.url}" />-->
        <!--<property name = "username" value = "${jdbc.username}" />-->
        <!--<property name = "password" value = "${jdbc.password}" />-->
        <!--<property name = "driverClassName" value = "${jdbc.driverClassName}" />-->
        <!--<property name = "filters" value = "${jdbc.filters}" />-->
        <!--&lt;!&ndash; 最大并发连接数 &ndash;&gt;-->
        <!--<property name = "maxActive" value = "${jdbc.maxActive}" />-->
        <!--&lt;!&ndash; 初始化连接数量 &ndash;&gt;-->
        <!--<property name = "initialSize" value = "${jdbc.initialSize}" />-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name = "maxWait" value = "${jdbc.maxWait}" />-->
        <!--&lt;!&ndash; 最小空闲连接数 &ndash;&gt;-->
        <!--<property name = "minIdle" value = "${jdbc.minIdle}" />-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name = "timeBetweenEvictionRunsMillis" value ="${jdbc.timeBetweenEvictionRunsMillis}" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name = "minEvictableIdleTimeMillis" value ="${jdbc.minEvictableIdleTimeMillis}" />-->

        <!--<property name = "validationQuery" value = "${jdbc.validationQuery}" />-->
        <!--<property name = "testWhileIdle" value = "${jdbc.testWhileIdle}" />-->
        <!--<property name = "testOnBorrow" value = "${jdbc.testOnBorrow}" />-->
        <!--<property name = "testOnReturn" value = "${jdbc.testOnReturn}" />-->
        <!--<property name = "maxOpenPreparedStatements" value ="${jdbc.maxOpenPreparedStatements}" />-->
        <!--&lt;!&ndash;-->
            <!--下边俩个配置，通过datasource.getConnontion() 取得的连接必须在removeAbandonedTimeout这么多秒内调用close(),要不我就弄死你.(就是conn不能超过指定的租期)-->
            <!--对于业务真要运行成长时间，建议关闭或延长时间-->
        <!--&ndash;&gt;-->
        <!--&lt;!&ndash; 打开 removeAbandoned 功能 &ndash;&gt;-->
        <!--<property name = "removeAbandoned" value = "${jdbc.removeAbandoned}" />-->
        <!--&lt;!&ndash; 1800 秒，也就是 30 分钟 &ndash;&gt;-->
        <!--<property name = "removeAbandonedTimeout" value ="${jdbc.removeAbandonedTimeout}" />-->

        <!--&lt;!&ndash; 关闭 abanded 连接时输出错误日志 &ndash;&gt;-->
        <!--<property name = "logAbandoned" value = "${jdbc.logAbandoned}" />-->
    <!--</bean>-->

    <!--<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">-->
        <!--<property name="slowSqlMillis" value="${jdbc.slowSql}" />-->
        <!--<property name="logSlowSql" value="true" />-->
    <!--</bean>-->

    <!--<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">-->
        <!--<property name="dbType" value="mysql" />-->
    <!--</bean>-->

    <!--<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">-->
        <!--<property name="resultSetLogEnabled" value="false" />-->
        <!--<property name="statementExecutableSqlLogEnable" value="true" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 使用alibaba druid数据源的相关配置 &ndash;&gt;-->

    <!-- session工厂 -->
    <!-- spring与hibernate整合配置，扫描所有dao -->
    <!--<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">-->
        <!--&lt;!&ndash; 注册上边datasource中的配置信息，为hibernate所用 &ndash;&gt;-->
        <!--<property name="dataSource" ref="dataSource" />-->
        <!--&lt;!&ndash; 项目实体类所在目录说明 &ndash;&gt;-->
        <!--<property name="packagesToScan">-->
            <!--<list>-->
                <!--&lt;!&ndash; 可以加多个包 &ndash;&gt;-->
                <!--<value>com.shop.model</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--&lt;!&ndash; bibernate的一些配置 &ndash;&gt;-->
        <!--<property name="hibernateProperties">-->
            <!--<props>-->

                <!--&lt;!&ndash; 允许Hibernate针对特定的关系数据库生成优化的SQL &ndash;&gt;-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>-->

                <!--&lt;!&ndash; 在SessionFactory创建时，自动检查数据库结构 取值 validate | update | create | create-drop &ndash;&gt;-->
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->

                <!--&lt;!&ndash; 输出所有SQL语句到控制台 &ndash;&gt;-->
                <!--<prop key="hibernate.show_sql">false</prop>-->

                <!--&lt;!&ndash; 在log和console中打印出更漂亮的SQL &ndash;&gt;-->
                <!--<prop key="hibernate.format_sql">true</prop>-->

                <!--&lt;!&ndash; 允许被缓存的JDBC连接开启自动提交(autocommit) (不建议). &ndash;&gt;-->
                <!--<prop key="hibernate.connection.autocommit">false</prop>-->

                <!--&lt;!&ndash; 为"当前" Session指定一个(自定义的)策略。 如： jta | thread | custom.Class &ndash;&gt;-->
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->


                <!--&lt;!&ndash; 能用来完全禁止使用二级缓存. 对那些在类的映射定义中指定<cache>的类，会默认开启二级缓存. &ndash;&gt;-->
                <!--<prop key="hibernate.cache.use_second_level_cache">true</prop>-->

                <!--&lt;!&ndash; 允许查询缓存, 个别查询仍然需要被设置为可缓存的. &ndash;&gt;-->
                <!--<prop key="hibernate.cache.use_query_cache">true</prop>-->

                <!--&lt;!&ndash;  &ndash;&gt;-->
                <!--<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>-->

                <!--&lt;!&ndash; 二级缓存区域名的前缀. &ndash;&gt;-->
                <!--<prop key="hibernate.cache.region_prefix">hibernate</prop>-->

                <!--&lt;!&ndash; 强制Hibernate以更人性化的格式将数据存入二级缓存. &ndash;&gt;-->
                <!--<prop key="hibernate.cache.use_structured_entries">true</prop>-->

                <!--&lt;!&ndash; 二级缓存监测 &ndash;&gt;-->
                <!--<prop key="hibernate.generate_statistics">false</prop>-->

                <!--&lt;!&ndash;  &ndash;&gt;-->
                <!--<prop key="hibernate.redis.cacheTimeSeconds">86400</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置事务管理器 &ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">-->
        <!--<property name="sessionFactory" ref="sessionFactory" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置事务异常封装 &ndash;&gt;-->
    <!--<bean id="persistenceExceptionTranslationPostProcessor"-->
          <!--class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />-->

    <!--&lt;!&ndash; 配合<tx:advice>和<aop:advisor>完成了事务切面的定义 &ndash;&gt;-->
    <!--&lt;!&ndash; 使用强大的切点表达式是语言轻松定义目标方法 &ndash;&gt;-->
    <!--<aop:config proxy-target-class="true">-->
        <!--&lt;!&ndash; 通过aop定义事务增强切面 &ndash;&gt;-->
        <!--<aop:pointcut expression=" execution(* com.shop.service..*(..))"-->
                      <!--id="serviceMethod" />-->
        <!--&lt;!&ndash; 引用事务增强 &ndash;&gt;-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />-->
    <!--</aop:config>-->
    <!--&lt;!&ndash; 事务增强 &ndash;&gt;-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
    <!--&lt;!&ndash; 事务属性定义 &ndash;&gt;-->
    <!--<tx:attributes>-->
        <!--<tx:method name="*" />-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 开启注解事务&ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

</beans>